

import numpy as np
​
rr1 = np.array([1,2,3,4,5,6])
print("1D array: ", arr1)
arr2 = np.array([[1,2,3],[4,5,6],[7,8,9]])
print("2D array: ", "\n",arr2)

arr1 = np.array([1,2,3,4,5,6])
print("1D array: ", arr1)
arr2 = np.array([[1,2,3],[4,5,6],[7,8,9]])
print("2D array: ", "\n",arr2)
​
1D array:  [1 2 3 4 5 6]
2D array:  
 [[1 2 3]
 [4 5 6]
 [7 8 9]]
# Creating a rank 1 Array
arr = np.array([1, 2, 3])
print("Array with Rank 1: \n",arr)
 
Array with Rank 1: 
 [1 2 3]
# Creating a rank 2 Array
arr = np.array([[1, 2, 3],
                [4, 5, 6]])
print("Array with Rank 2: \n", arr)
​
Array with Rank 2: 
 [[1 2 3]
 [4 5 6]]
# Creating an array from tuple
arr = np.array((1, 3, 2))
print("\nArray created using "
      "passed tuple:\n", arr)
​

Array created using passed tuple:
 [1 3 2]
Understanding attributes of arrays¶
print("About arr2:")
print("Type\t\t:" ,type(arr2))
print("Datatype\t:",arr2.dtype)
print("Shape\t\t:", arr2.shape)
print("Size\t\t:",arr2.size)
print("itemsize\t:",arr2.itemsize)
print("No. of dim\t:",arr2.ndim)
print("No. of bytes\t:", arr2.nbytes)
About arr2:
Type		: <class 'numpy.ndarray'>
Datatype	: int32
Shape		: (3, 3)
Size		: 9
itemsize	: 4
No. of dim	: 2
No. of bytes	: 36
Creating Special arrays¶
arr3 = np.zeros((5,2), dtype=int)
arr4 = np.ones((3,4),dtype=float)
arr5 = np.eye(4,3)
arr6 = np.random.rand(3,2)
arr7 = np.random.randint(7,size=(2,6))
print("Zero Array \t:\n",arr3)
print("Arrays with unit values\t:\n",arr4)
print("Identity matrix\t:\n",arr5)
print("Random array\t\n",arr6)
print("Random integer array\t:\n" , arr7)
Zero Array 	:
 [[0 0]
 [0 0]
 [0 0]
 [0 0]
 [0 0]]
Arrays with unit values	:
 [[1. 1. 1. 1.]
 [1. 1. 1. 1.]
 [1. 1. 1. 1.]]
Identity matrix	:
 [[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [0. 0. 0.]]
Random array	
 [[0.93284965 0.29399229]
 [0.51859721 0.01014825]
 [0.84815736 0.71800751]]
Random integer array	:
 [[4 6 3 1 1 1]
 [5 1 2 4 2 2]]
Creating arrays using "arange")¶
arr8 = np.arange(1,10,3)
print("Array created with arange: \t\n",arr8)
​
Array created with arange: 	
 [1 4 7]
Creating arrays using "linspace"¶
arr9 = np.linspace(1,10,50)
print("Array created using linspace requesting 50 elements within 1 to 10:\t\n",arr9)
Array created using linspace requesting 50 elements within 1 to 10:	
 [ 1.          1.18367347  1.36734694  1.55102041  1.73469388  1.91836735
  2.10204082  2.28571429  2.46938776  2.65306122  2.83673469  3.02040816
  3.20408163  3.3877551   3.57142857  3.75510204  3.93877551  4.12244898
  4.30612245  4.48979592  4.67346939  4.85714286  5.04081633  5.2244898
  5.40816327  5.59183673  5.7755102   5.95918367  6.14285714  6.32653061
  6.51020408  6.69387755  6.87755102  7.06122449  7.24489796  7.42857143
  7.6122449   7.79591837  7.97959184  8.16326531  8.34693878  8.53061224
  8.71428571  8.89795918  9.08163265  9.26530612  9.44897959  9.63265306
  9.81632653 10.        ]
Slicing
arr10 = np.array([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20]])
print(arr10)
print("Row 2:",arr10[1,:])
print("Column 2:",arr10[:,3])
print("Elements 7,8,12,13 :\n", arr10[1:3,1:3])
print("All elements: \n",arr10[::])
print("Strides:\n",arr10[0::2,1:3])
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]]
Row 2: [ 6  7  8  9 10]
Column 2: [ 4  9 14 19]
Elements 7,8,12,13 :
 [[ 7  8]
 [12 13]]
All elements: 
 [[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]]
Strides:
 [[ 2  3]
 [12 13]]
Masking - Important concept in Image processing¶
arr11 = np.array([1,2,3,4,5,6,7,8,9])
mask = np.array([0,1,1,0,1,0,1,0,0],dtype=bool)
print(arr11[mask])
[2 3 5 7]
Scalar Operations - Arithmetic¶
arr13 = np.array([1,2,3])
arr14 = np.array([4,5,6])
arr15 = arr13+arr14
arr16 = arr13 - arr14
print("Summation:\t",arr15)
print("Difference:\t",arr16)
​
arr16+=5
print("Previous output after adding 5:",arr16)
Summation:	 [5 7 9]
Difference:	 [-3 -3 -3]
Previous output after adding 5: [2 2 2]
Trignometric & Logarithmic operations¶
arr17 = np.array([15,30,45,90])
result7 = np.sin(arr17)
print("Sin values:\t",result7)
result8 = np.log(arr17)
print("Log value:\t",result8)
Sin values:	 [ 0.65028784 -0.98803162  0.85090352  0.89399666]
Log value:	 [2.7080502  3.40119738 3.80666249 4.49980967]