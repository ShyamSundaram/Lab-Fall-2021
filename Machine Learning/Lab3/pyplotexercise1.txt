
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

List1 = range(10)
List2 = [x*x for x in List1]
print(List1)
print(List2)
plt.plot(List1,List2)
plt.show()
range(0, 10)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

.plot
List1 = np.arange(1,20,2)
List2 = np.arange(1,20,2)
print(List1)
print(List2)
​
plt.title("Line Plot")
plt.xlabel("Range 1 - 20 in steps of 2")
plt.ylabel("Range 1 - 20 in steps of 2")
plt.plot(List1,List2)
​
plt.savefig("plot1.jpg")
plt.show()
[ 1  3  5  7  9 11 13 15 17 19]
[ 1  3  5  7  9 11 13 15 17 19]

show()
List1 = np.arange(0,10,0.1)
List2 = np.sin(List1)
print(List1)
print(List2)
plt.title("Sin Curve")
plt.xlabel("0 to 10 (o.1)")
plt.ylabel("sin value")
plt.plot(List1,List2)
plt.savefig("plot2.jpg")
plt.show()
[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.  1.1 1.2 1.3 1.4 1.5 1.6 1.7
 1.8 1.9 2.  2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.  3.1 3.2 3.3 3.4 3.5
 3.6 3.7 3.8 3.9 4.  4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.  5.1 5.2 5.3
 5.4 5.5 5.6 5.7 5.8 5.9 6.  6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.  7.1
 7.2 7.3 7.4 7.5 7.6 7.7 7.8 7.9 8.  8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9
 9.  9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9]
[ 0.          0.09983342  0.19866933  0.29552021  0.38941834  0.47942554
  0.56464247  0.64421769  0.71735609  0.78332691  0.84147098  0.89120736
  0.93203909  0.96355819  0.98544973  0.99749499  0.9995736   0.99166481
  0.97384763  0.94630009  0.90929743  0.86320937  0.8084964   0.74570521
  0.67546318  0.59847214  0.51550137  0.42737988  0.33498815  0.23924933
  0.14112001  0.04158066 -0.05837414 -0.15774569 -0.2555411  -0.35078323
 -0.44252044 -0.52983614 -0.61185789 -0.68776616 -0.7568025  -0.81827711
 -0.87157577 -0.91616594 -0.95160207 -0.97753012 -0.993691   -0.99992326
 -0.99616461 -0.98245261 -0.95892427 -0.92581468 -0.88345466 -0.83226744
 -0.77276449 -0.70554033 -0.63126664 -0.55068554 -0.46460218 -0.37387666
 -0.2794155  -0.1821625  -0.0830894   0.0168139   0.1165492   0.21511999
  0.31154136  0.40484992  0.49411335  0.57843976  0.6569866   0.72896904
  0.79366786  0.85043662  0.8987081   0.93799998  0.96791967  0.98816823
  0.99854335  0.99894134  0.98935825  0.96988981  0.94073056  0.90217183
  0.85459891  0.79848711  0.7343971   0.66296923  0.58491719  0.50102086
  0.41211849  0.31909836  0.22288991  0.12445442  0.02477543 -0.07515112
 -0.17432678 -0.27176063 -0.36647913 -0.45753589]

.plot
List1 = np.arange(0,10,0.1)
List2 = np.sin(List1)
List3 = np.cos(List1)
print(List1)
print(List2)
print(List3)
​
plt.title("Sin Curve")
plt.xlabel("0 to 10 (o.1)")
plt.ylabel("-1 to 1")
plt.plot(List1,List2)
plt.plot(List1,List3)
​
#Adding legends
plt.legend(['sin','cos'])
plt.savefig("plot3.jpg")
plt.show()
[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.  1.1 1.2 1.3 1.4 1.5 1.6 1.7
 1.8 1.9 2.  2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.  3.1 3.2 3.3 3.4 3.5
 3.6 3.7 3.8 3.9 4.  4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.  5.1 5.2 5.3
 5.4 5.5 5.6 5.7 5.8 5.9 6.  6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.  7.1
 7.2 7.3 7.4 7.5 7.6 7.7 7.8 7.9 8.  8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9
 9.  9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9]
[ 0.          0.09983342  0.19866933  0.29552021  0.38941834  0.47942554
  0.56464247  0.64421769  0.71735609  0.78332691  0.84147098  0.89120736
  0.93203909  0.96355819  0.98544973  0.99749499  0.9995736   0.99166481
  0.97384763  0.94630009  0.90929743  0.86320937  0.8084964   0.74570521
  0.67546318  0.59847214  0.51550137  0.42737988  0.33498815  0.23924933
  0.14112001  0.04158066 -0.05837414 -0.15774569 -0.2555411  -0.35078323
 -0.44252044 -0.52983614 -0.61185789 -0.68776616 -0.7568025  -0.81827711
 -0.87157577 -0.91616594 -0.95160207 -0.97753012 -0.993691   -0.99992326
 -0.99616461 -0.98245261 -0.95892427 -0.92581468 -0.88345466 -0.83226744
 -0.77276449 -0.70554033 -0.63126664 -0.55068554 -0.46460218 -0.37387666
 -0.2794155  -0.1821625  -0.0830894   0.0168139   0.1165492   0.21511999
  0.31154136  0.40484992  0.49411335  0.57843976  0.6569866   0.72896904
  0.79366786  0.85043662  0.8987081   0.93799998  0.96791967  0.98816823
  0.99854335  0.99894134  0.98935825  0.96988981  0.94073056  0.90217183
  0.85459891  0.79848711  0.7343971   0.66296923  0.58491719  0.50102086
  0.41211849  0.31909836  0.22288991  0.12445442  0.02477543 -0.07515112
 -0.17432678 -0.27176063 -0.36647913 -0.45753589]
[ 1.          0.99500417  0.98006658  0.95533649  0.92106099  0.87758256
  0.82533561  0.76484219  0.69670671  0.62160997  0.54030231  0.45359612
  0.36235775  0.26749883  0.16996714  0.0707372  -0.02919952 -0.12884449
 -0.22720209 -0.32328957 -0.41614684 -0.5048461  -0.58850112 -0.66627602
 -0.73739372 -0.80114362 -0.85688875 -0.90407214 -0.94222234 -0.97095817
 -0.9899925  -0.99913515 -0.99829478 -0.98747977 -0.96679819 -0.93645669
 -0.89675842 -0.84810003 -0.79096771 -0.7259323  -0.65364362 -0.57482395
 -0.49026082 -0.40079917 -0.30733287 -0.2107958  -0.11215253 -0.01238866
  0.08749898  0.18651237  0.28366219  0.37797774  0.46851667  0.55437434
  0.63469288  0.70866977  0.77556588  0.83471278  0.88551952  0.92747843
  0.96017029  0.98326844  0.9965421   0.99985864  0.99318492  0.97658763
  0.95023259  0.91438315  0.86939749  0.8157251   0.75390225  0.68454667
  0.60835131  0.52607752  0.43854733  0.34663532  0.25125984  0.15337386
  0.05395542 -0.04600213 -0.14550003 -0.24354415 -0.33915486 -0.43137684
 -0.51928865 -0.6020119  -0.67872005 -0.74864665 -0.81109301 -0.86543521
 -0.91113026 -0.9477216  -0.97484362 -0.99222533 -0.99969304 -0.99717216
 -0.98468786 -0.96236488 -0.93042627 -0.88919115]

#Create Lsits
x= np.arange(0,100,2)
y = np.arange(50,-50,-2)
y1 = np.arange(100,0,-2)
print(x)
print(y)
print(y1)
plt.figure(figsize=(5,5))
​
plt.title("With Grid lines and sized")
plt.xlabel("Range 0 - 100")
plt.ylabel("Range 50 --50")
​
#plt.xticks(np.linspace(0, 100, 10, endpoint=True))
​
plt.grid(True)
plt.scatter(x,y,label="One",color="green")
plt.scatter(x,y1,label="Two",color="red")
plt.legend(['A','B'])
​
#plt.savefig("E:\ML Online\Session - IV\Pyplot&Seaborn\\a.jpg")
plt.show()
[ 0  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46
 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94
 96 98]
[ 50  48  46  44  42  40  38  36  34  32  30  28  26  24  22  20  18  16
  14  12  10   8   6   4   2   0  -2  -4  -6  -8 -10 -12 -14 -16 -18 -20
 -22 -24 -26 -28 -30 -32 -34 -36 -38 -40 -42 -44 -46 -48]
[100  98  96  94  92  90  88  86  84  82  80  78  76  74  72  70  68  66
  64  62  60  58  56  54  52  50  48  46  44  42  40  38  36  34  32  30
  28  26  24  22  20  18  16  14  12  10   8   6   4   2]

Twin axes plot¶
Comparison between one data with a another data

l
figure = plt.figure()
axes1 = figure.add_subplot(1, 1, 1)
axes2 = axes1.twinx()
​
List1 = np.linspace(0., 10., 100)
List2 = [x**2 for x in List1]
List3 = [x**3 for x in List1]
print(List1)
print(List2)
print(List3)
axes1.plot(List1, List2, 'b-')
axes2.plot(List1, List3, 'r-')
​
axes1.set_ylabel('X power 2', color='red')
axes2.set_ylabel('X*x', color='blue')
axes1.set_xlabel('X')
​
plt.show()
[ 0.          0.1010101   0.2020202   0.3030303   0.4040404   0.50505051
  0.60606061  0.70707071  0.80808081  0.90909091  1.01010101  1.11111111
  1.21212121  1.31313131  1.41414141  1.51515152  1.61616162  1.71717172
  1.81818182  1.91919192  2.02020202  2.12121212  2.22222222  2.32323232
  2.42424242  2.52525253  2.62626263  2.72727273  2.82828283  2.92929293
  3.03030303  3.13131313  3.23232323  3.33333333  3.43434343  3.53535354
  3.63636364  3.73737374  3.83838384  3.93939394  4.04040404  4.14141414
  4.24242424  4.34343434  4.44444444  4.54545455  4.64646465  4.74747475
  4.84848485  4.94949495  5.05050505  5.15151515  5.25252525  5.35353535
  5.45454545  5.55555556  5.65656566  5.75757576  5.85858586  5.95959596
  6.06060606  6.16161616  6.26262626  6.36363636  6.46464646  6.56565657
  6.66666667  6.76767677  6.86868687  6.96969697  7.07070707  7.17171717
  7.27272727  7.37373737  7.47474747  7.57575758  7.67676768  7.77777778
  7.87878788  7.97979798  8.08080808  8.18181818  8.28282828  8.38383838
  8.48484848  8.58585859  8.68686869  8.78787879  8.88888889  8.98989899
  9.09090909  9.19191919  9.29292929  9.39393939  9.49494949  9.5959596
  9.6969697   9.7979798   9.8989899  10.        ]
[0.0, 0.010203040506070809, 0.040812162024283234, 0.09182736455463729, 0.16324864809713294, 0.25507601265177027, 0.36730945821854916, 0.49994898479746963, 0.6529945923885317, 0.8264462809917354, 1.020304050607081, 1.234567901234568, 1.4692378328741966, 1.7243138455259668, 1.9997959391898785, 2.295684113865932, 2.611978369554127, 2.9486787062544635, 3.305785123966942, 3.683297622691562, 4.081216202428324, 4.499540863177226, 4.938271604938272, 5.397408427711458, 5.8769513314967865, 6.376900316294255, 6.897255382103867, 7.438016528925619, 7.999183756759514, 8.58075706560555, 9.182736455463727, 9.805121926334046, 10.447913478216508, 11.111111111111112, 11.794714825017854, 12.498724619936741, 13.223140495867767, 13.967962452810939, 14.733190490766248, 15.5188246097337, 16.324864809713297, 17.151311090705025, 17.998163452708905, 18.865421895724925, 19.75308641975309, 20.661157024793383, 21.58963371084583, 22.538516477910417, 23.507805325987146, 24.497500255076016, 25.50760126517702, 26.538108356290174, 27.58902152841547, 28.660340781552907, 29.752066115702476, 30.864197530864196, 31.996735027038056, 33.149678604224064, 34.3230282624222, 35.51678400163248, 36.73094582185491, 37.96551372308948, 39.22048770533618, 40.49586776859504, 41.79165391286603, 43.10784613814917, 44.44444444444445, 45.801448831751856, 47.178859300071416, 48.576675849403124, 49.994898479746965, 51.43352719110294, 52.89256198347107, 54.37200285685134, 55.871849811243756, 57.39210284664829, 58.93276196306499, 60.49382716049382, 62.0752984389348, 63.67717579838791, 65.29945923885319, 66.94214876033058, 68.6052443628201, 70.2887460463218, 71.99265381083562, 73.7169676563616, 75.4616875828997, 77.22681359044994, 79.01234567901236, 80.81828384858687, 82.64462809917353, 84.49137843077237, 86.35853484338332, 88.24609733700643, 90.15406591164167, 92.08244056728904, 94.03122130394858, 96.00040812162024, 97.99000102030406, 100.0]
[0.0, 0.0010306101521283645, 0.008244881217026916, 0.027826474107465846, 0.06595904973621533, 0.1288262690160456, 0.22261179285972676, 0.353499282180029, 0.5276723978897226, 0.7513148009015777, 1.0306101521283648, 1.3717421124828535, 1.7808943428778141, 2.264250504226017, 2.827994257440232, 3.47830926343323, 4.221379183117781, 5.063387677406655, 6.010518407212621, 7.068955033448452, 8.244881217026919, 9.544480618860783, 10.973936899862828, 12.539433720945809, 14.247154743022513, 16.103283627005695, 18.114004033808136, 20.285499624342595, 22.623954059521857, 25.135551000258676, 27.82647410746584, 30.7029070420561, 33.77103346494225, 37.037037037037045, 40.50710141925324, 44.187410272503634, 48.08414725770097, 52.20349603575805, 56.551640267587615, 61.13476361410246, 65.95904973621535, 71.030682294839, 76.35584495088627, 81.94072136526988, 87.79149519890262, 93.91435011269719, 100.31546976756647, 107.0010378244232, 113.9772379441801, 121.25025378774998, 128.82626901604553, 136.71146728997968, 144.9120322704651, 153.43414761841456, 162.28399699474076, 171.46776406035664, 180.99163247617486, 190.86178590310823, 201.0844080020694, 211.66568243397137, 222.61179285972673, 233.92892294024833, 245.6232563364488, 257.70097670924116, 270.168267719538, 283.0313130282521, 296.29629629629636, 309.96940118458326, 324.0568113540259, 338.5647104655369, 353.49928218002907, 368.866710158415, 384.67317806160776, 400.92486955052, 417.6279682860644, 434.7886579291537, 452.4131221407009, 470.5075445816186, 489.0781089128197, 508.1309987952166, 527.6723978897228, 547.7084898572501, 568.245458358712, 589.2894870550213, 610.8467596070901, 632.9234596758321, 655.525770922159, 678.6598770069843, 702.331961591221, 726.5482083357809, 751.3148009015775, 776.6379229495238, 802.5237581405318, 828.978490135515, 856.0083025953855, 883.6193791810564, 911.8179035534408, 940.6100593734508, 970.0020303019999, 1000.0]

Colors, Markers, Line styles (Customize)¶
lot (x , y , linewidth =5, c='#FA4500' ,linestyle='--') 
plt.plot (x , z , c='b',marker='|',markersize
x = np.linspace(-3.14,3.14,100)
print(x)
y = np.sin(x)
z = np.cos(x)
# Plotting the curves 
plt.plot (x , y , linewidth =5, c='#FA4500' ,linestyle='--') 
plt.plot (x , z , c='b',marker='|',markersize=10) 
plt.show ()
[-3.14       -3.07656566 -3.01313131 -2.94969697 -2.88626263 -2.82282828
 -2.75939394 -2.6959596  -2.63252525 -2.56909091 -2.50565657 -2.44222222
 -2.37878788 -2.31535354 -2.25191919 -2.18848485 -2.12505051 -2.06161616
 -1.99818182 -1.93474747 -1.87131313 -1.80787879 -1.74444444 -1.6810101
 -1.61757576 -1.55414141 -1.49070707 -1.42727273 -1.36383838 -1.30040404
 -1.2369697  -1.17353535 -1.11010101 -1.04666667 -0.98323232 -0.91979798
 -0.85636364 -0.79292929 -0.72949495 -0.66606061 -0.60262626 -0.53919192
 -0.47575758 -0.41232323 -0.34888889 -0.28545455 -0.2220202  -0.15858586
 -0.09515152 -0.03171717  0.03171717  0.09515152  0.15858586  0.2220202
  0.28545455  0.34888889  0.41232323  0.47575758  0.53919192  0.60262626
  0.66606061  0.72949495  0.79292929  0.85636364  0.91979798  0.98323232
  1.04666667  1.11010101  1.17353535  1.2369697   1.30040404  1.36383838
  1.42727273  1.49070707  1.55414141  1.61757576  1.6810101   1.74444444
  1.80787879  1.87131313  1.93474747  1.99818182  2.06161616  2.12505051
  2.18848485  2.25191919  2.31535354  2.37878788  2.44222222  2.50565657
  2.56909091  2.63252525  2.6959596   2.75939394  2.82282828  2.88626263
  2.94969697  3.01313131  3.07656566  3.14      ]

oupb
df = pd.read_csv("diabetes.csv")
df1 = df.groupby("Insulin").agg({"Pregnancies":np.sum})
df1.to_csv("diabetes_slice.csv")
df1.head()
Pregnancies
Insulin	
0	1658
14	0
15	2
16	2
18	4
'2015', '2016', '2017', '
years = ('2015', '2016', '2017', '2018', '2019') 
visitors = (1023,2034,1045,3405,4466) 
index = np.arange(len(visitors)) 
#bar_width = 1
bar_width = 0.6
# x stored in index y value is stored in visitors
plt.bar(index, visitors, bar_width, color="green") 
plt.show()

gr
df1 = pd.read_csv("diabetes_slice.csv")
insulin = df1['Insulin']
pregnancies = df1['Pregnancies']
​
Total=(df1.shape)[0]
#print(Total)
​
plt.xlim(0,max(df1['Insulin']))
plt.ylim(0,max(df1['Pregnancies']))
#print(plt.xlim)
​
bar_width = 0.8
plt.bar(insulin,pregnancies, bar_width, color="green") 
​
plt.show()

plt.bar([0.25,1.25,2.25,3.25,4.25],[50,40,70,80,20],label="AAAA",width=.2)
plt.bar([.75,1.75,2.75,3.75,4.75],[80,20,20,50,60],label="B", color='r',width=.5)
plt.legend()
plt.xlabel('Days')
plt.ylabel('Distance (kms)')
plt.title('Some Info...')
plt.show()

.6
#pie charts
List1 = ['America', 'UK', 'Italy', 'Spain','China']
List2 = [40, 20, 20, 10,10]
explode = (0.5, 0, 0, 0.6,0)  
​
figure1, axes1 = plt.subplots()
​
axes1.pie(List2, explode=explode, labels=List1, shadow=True, startangle=90)
​
plt.show()

A histogram is basically used to represent data provided in a form of some groups.
It is accurate method for the graphical representation of numerical data distribution.

It is a type of bar plot where X-axis represents the bin ranges while Y-axis gives information about frequency.

 = 5
#histograms
​
x = np.random.randint(20,size=(50))
num_bins = 5
n, bins, patches = plt.hist(x, num_bins, facecolor='red', alpha=0.5, width=2)
print(n)
print(bins)
print(patches[0])
#plt.show()
[15.  8.  6. 15.  6.]
[ 0.   3.6  7.2 10.8 14.4 18. ]
Rectangle(xy=(-2.22045e-16, 0), width=2, height=15, angle=0)

 from mpl_toolkits.mplot3d import Axes3D
​
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
​
x =np.random.randint(5,size=(10))
y =np.random.randint(15,size=(10))
z =np.random.randint(10,size=(10))
​
ax.scatter(x, y, z, c='r', marker='o')
​
ax.set_xlabel('X Label')
ax.set_ylabel('Y Label')
ax.set_zlabel('Z Label')
​
plt.show()

#subplots
​
# Initialize the plot
List1 = np.linspace(0., 10., 10)
List2 = [x**2 for x in List1]
List3 = [x**3 for x in List1]
List4 = [np.sin(x) for x in List1]
​
fig = plt.figure(figsize=(12,6))
plt.title("Welcome to subplot")
ax1 = fig.add_subplot(131)
#ax2 = fig.add_subplot(132)
ax3 = fig.add_subplot(133)
​
ax4 = fig.add_subplot(231)
ax5 = fig.add_subplot(232)
ax6 = fig.add_subplot(233)
​
ax1.plot(np.arange(10),np.arange(0,20,2))
ax3.plot(List1,List2)
ax5.plot(List1,List3)
ax6.plot(List1,List4)
ax4.bar(List1,List2)
​
plt.tight_layout()
plt.show()

# Initialize the plot
fig = plt.figure()
ax1 = fig.add_subplot(131)
ax2 = fig.add_subplot(133)
​
# Plot the data
ax1.bar([1,2,3],[3,4,5])
ax2.barh([0.5,1,2.5],[0,1,2])
​
# Show the plot
plt.show()
​
