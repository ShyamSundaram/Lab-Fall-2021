        -:    0:Source:prog.c
        -:    0:Graph:prog.gcno
        -:    0:Data:prog.gcda
        -:    0:Runs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <time.h>
        -:    4:#include <omp.h>
        -:    5:
        -:    6:#define SIZE 10000
        -:    7:
        2:    8:int* initArray(int r,int u,int l)
        -:    9:{
        2:   10:    srand(time(0));
        -:   11:
        2:   12:    int *arr=(int*)malloc(r*sizeof(int));
        -:   13:    
    20002:   14:    for(int j=0;j<r;++j)
    20000:   15:        arr[j]=(rand()%(u-l+1))+l;
        -:   16:
        -:   17:    
        2:   18:    return arr;
        -:   19:}
        -:   20:
        2:   21:void freeArray(int* arr)
        -:   22:{
        2:   23:    free(arr);
        2:   24:}
        -:   25:
        1:   26:void bubbleSortSerial(int a[])
        -:   27:{
        -:   28:    int temp;
    10001:   29:    for(int i=0;i<SIZE;++i)
        -:   30:    {
 50015000:   31:        for(int j=i;j<SIZE;++j)
        -:   32:        {
 50005000:   33:            if(a[i]>a[j+1])
        -:   34:            {
 12416482:   35:                temp=a[j];
 12416482:   36:                a[j]=a[j+1];
 12416482:   37:                a[j+1]=temp;
        -:   38:            }
        -:   39:        }
        -:   40:    }
        1:   41:}
        -:   42:
        1:   43:void bubbleSortParallel(int a[])
        -:   44:{
        1:   45:    omp_set_num_threads(4);
    10001:   46:    for(int i=0;i<SIZE;++i)
        -:   47:    {
    10000:   48:        int first=i%2;
        -:   49:        #pragma omp paralel for default(none) shared(a,first)
 50005000:   50:        for(int j=first;j<SIZE-1;j+=2)
        -:   51:        {
 49995000:   52:            if(a[j]>a[j+1])
        -:   53:            {
 24818054:   54:                int temp=a[j];
 24818054:   55:                a[j]=a[j+1];
 24818054:   56:                a[j+1]=temp;
        -:   57:            }
        -:   58:        }
        -:   59:    }
        1:   60:}
        -:   61:
        1:   62:void main()
        -:   63:{
        1:   64:    int *a=initArray(SIZE,100,0);
        1:   65:    int *b=initArray(SIZE,100,0);
        -:   66:
        1:   67:    float start=omp_get_wtime();
        1:   68:    bubbleSortSerial(a);
        1:   69:    float end=omp_get_wtime();
        1:   70:    float exec=end-start;
        1:   71:    printf("Time taken is: %f\n",exec);
        1:   72:    freeArray(a);
        -:   73:
        1:   74:    start=omp_get_wtime();
        1:   75:    bubbleSortParallel(b);
        1:   76:    end=omp_get_wtime();
        1:   77:    exec=end-start;
        1:   78:    printf("Time taken is: %f\n",exec);
        -:   79:    
        1:   80:    freeArray(b);
        1:   81:}
        -:   82:
        -:   83://https://gcc.gnu.org/onlinedocs/gcc/Invoking-Gcov.html#Invoking-Gcov
